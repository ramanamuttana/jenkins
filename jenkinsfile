pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/jaiswaladi246/Petclinic.git'
            }
        }
    
        stage('Code Compile') {
            steps {
                sh "mvn clean compile"
            }
        }
        
        stage('Unit Tests') {
            steps {
                sh "mvn test"
            }
        }
        
        stage('Test with JaCoCo') {
            steps {
                sh 'mvn test -Djacoco.excludes=org/hibernate/proxy/**'
            }
        }

        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Petclinic \
                    -Dsonar.java.binaries=. \
                    -Dsonar.host.url=http://172.17.0.3:9000 \
                    -Dsonar.projectKey=Petclinic '''
    
                }
            }
        }
        
         stage("OWASP Dependency Check"){
            steps{
                dependencyCheck additionalArguments: '--scan ./ --format HTML ', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage("Artifact-Build"){
            steps{
                sh " mvn clean install"
            }
        }
        
      
        stage('Check Docker') {
            steps {
                sh 'whoami'
                sh 'groups'
                sh 'docker ps'
                sh 'ls -lah /var/run/docker.sock'
            }
        }
        
        stage("Docker Build "){
            steps{
                script{
                       withDockerRegistry(credentialsId: '16bda58e-7358-4', toolName: 'docker') {
    
                    
                        sh "docker build -t image1 ."
                    }
                }
            }  
        }
        
        
    }
}
        
      
